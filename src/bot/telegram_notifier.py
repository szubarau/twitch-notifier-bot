import os
import logging
import random
from datetime import datetime
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode

class TelegramNotifier:
    def __init__(self, config):
        self.config = config
        self.bot = Bot(token=self.config.telegram_token)
        self.id_file = "last_stream_id.txt"

    async def send_if_new(self, stream_data):
        stream_id = str(stream_data.get("id"))
        if stream_id == self._get_last_sent_id():
            logging.info("üîÅ –°—Ç—Ä–∏–º —É–∂–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω.")
            return

        await self.send_announcement_with_image(stream_data)
        self._save_last_sent_id(stream_id)

    async def send_status(self, stream_active: bool):
        status = "–≤ —ç—Ñ–∏—Ä–µ üé¨" if stream_active else "–Ω–µ –≤ —ç—Ñ–∏—Ä–µ üì¥"
        timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
        message = f"üõ† –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {timestamp}\n–°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–∞: {status}"
        await self._send_text(message)

    async def send_announcement_with_image(self, data: dict):
        title = data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        game = data.get("game_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        thumb = data.get("thumbnail_url", "").replace("{width}", "640").replace("{height}", "360")

        caption_templates = [
            f"üé¨ <b>–°—Ç—Ä–∏–º –Ω–∞—á–∞–ª—Å—è!</b>\n\nüì∫ <b>{title}</b>\nüéÆ –ò–≥—Ä–∞: <b>{game}</b>\n<a href='https://twitch.tv/zumich'>‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∏–º</a>",
            f"üî• <b>Zumich –≤ —ç—Ñ–∏—Ä–µ!</b>\n\nüî¥ <b>{title}</b>\nüé≤ –ò–≥—Ä–∞–µ—Ç –≤: <b>{game}</b>\nüëâ <a href='https://twitch.tv/zumich'>–í–∫–ª—é—á–∞–π—Å—è!</a>",
            f"üöÄ –ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä —É–∂–µ –∏–¥—ë—Ç!\n\nüéÆ <b>{game}</b>\nüì¢ –¢–µ–º–∞: <b>{title}</b>\nüé• <a href='https://twitch.tv/zumich'>–°–º–æ—Ç—Ä–µ—Ç—å</a>",
        ]

        caption = random.choice(caption_templates)

        try:
            await self.bot.send_photo(
                chat_id=self.config.telegram_channel,
                photo=thumb,
                caption=caption,
                parse_mode=ParseMode.HTML
            )
            logging.info("‚úÖ –ê–Ω–æ–Ω—Å —Å –æ–±–ª–æ–∂–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

    async def _send_text(self, message: str):
        try:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üî¥ –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∏–º", url="https://twitch.tv/zumich")]
            ])
            await self.bot.send_message(
                chat_id=self.config.telegram_channel,
                text=message,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
            logging.info("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")

    def _get_last_sent_id(self):
        if os.path.exists(self.id_file):
            with open(self.id_file) as f:
                return f.read().strip()
        return None

    def _save_last_sent_id(self, stream_id):
        with open(self.id_file, "w") as f:
            f.write(stream_id)


