trigger:
  branches:
    include:
      - main

schedules:
  - cron: "0/15 15-20 * * *"
    displayName: "Evening Stream Check"
    branches:
      include:
        - main
    always: true

variables:
  - group: twitch_bot_secrets

pool:
  vmImage: 'ubuntu-latest'

steps:
  - checkout: self

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9'

  - script: pip install -r requirements.txt
    displayName: 'Install dependencies'

  - task: Cache@2
    inputs:
      key: 'pip | "$(Agent.OS)" | requirements.txt'
      path: $(PIP_CACHE_DIR)
    displayName: 'Cache pip'
    continueOnError: true

  - task: Cache@2
    inputs:
      key: 'last-stream-id'
      path: last_stream_id.txt
      restoreKeys: last-stream-id
    displayName: 'Restore stream ID cache'
    condition: always()
    continueOnError: true

  - script: |
      PYTHONPATH=src python src/main.py
    displayName: 'Run Twitch Notifier'
    env:
      TWITCH_CLIENT_ID: $(TWITCH_CLIENT_ID)
      TWITCH_CLIENT_SECRET: $(TWITCH_CLIENT_SECRET)
      TELEGRAM_BOT_TOKEN: $(TELEGRAM_BOT_TOKEN)
      TELEGRAM_CHANNEL_ID: $(TELEGRAM_CHANNEL_ID)

  - script: |
      if [ -f last_stream_id.txt ]; then
        echo "✅ stream ID найден — кеш обновим"
        echo "##vso[task.setvariable variable=stream_id_exists]true"
      else
        echo "⚠️ stream ID отсутствует — кеш не обновляем"
        echo "##vso[task.setvariable variable=stream_id_exists]false"
      fi
    displayName: 'Check stream ID file'

  - task: Cache@2
    condition: eq(variables['stream_id_exists'], 'true')
    inputs:
      key: 'last-stream-id'
      path: last_stream_id.txt
    displayName: 'Update stream ID cache'



