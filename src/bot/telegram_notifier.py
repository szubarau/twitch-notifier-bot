import os
import sys
import logging
import random
from typing import Optional
from telegram import Bot
from telegram.constants import ParseMode


class TelegramNotifier:
    def __init__(self, config):
        self.config = config
        self.bot = Bot(token=self.config.telegram_token)

        # –ü—É—Å—Ç—å –¥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏–ª–∏ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        self.id_file = os.path.join(os.getcwd(), "last_stream_id.txt")

    async def send_if_new(self, stream_data: dict):
        stream_id = str(stream_data.get("id"))
        if self._get_last_sent_id() == stream_id:
            logging.info("üõë –°—Ç—Ä–∏–º —É–∂–µ –±—ã–ª –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω.")
            sys.exit(0)  # –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Pipeline

        await self.send_announcement_with_image(stream_data)
        self._save_last_sent_id(stream_id)

    async def send_announcement_with_image(self, data: dict):
        title = data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        game = data.get("game_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        thumbnail_url = data.get("thumbnail_url", "").replace("{width}", "640").replace("{height}", "360")

        captions = [
            f"üé¨ <b>–°—Ç—Ä–∏–º –Ω–∞—á–∞–ª—Å—è!</b>\n\nüì∫ <b>{title}</b>\nüéÆ –ò–≥—Ä–∞: <b>{game}</b>\n<a href='https://twitch.tv/zumich'>‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å</a>",
            f"üî• <b>Zumich –≤ —ç—Ñ–∏—Ä–µ!</b>\n\nüéÆ <b>{game}</b>\nüó£ <b>{title}</b>\n<a href='https://twitch.tv/zumich'>üî¥ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è</a>",
            f"üö® <b>–ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä!</b>\n\nüé≤ <b>{game}</b>\nüéô <b>{title}</b>\n‚ñ∂Ô∏è <a href='https://twitch.tv/zumich'>–°–º–æ—Ç—Ä–∏ –Ω–∞ Twitch</a>",
        ]
        caption = random.choice(captions)

        try:
            await self.bot.send_photo(
                chat_id=self.config.telegram_channel,
                photo=thumbnail_url,
                caption=caption,
                parse_mode=ParseMode.HTML
            )
            logging.info("‚úÖ –ê–Ω–æ–Ω—Å —Å –ø—Ä–µ–≤—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

    def _get_last_sent_id(self) -> Optional[str]:
        if os.path.exists(self.id_file):
            with open(self.id_file, "r") as f:
                return f.read().strip()
        return None

    def _save_last_sent_id(self, stream_id: str):
        try:
            with open(self.id_file, "w") as f:
                f.write(stream_id)
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID —Å—Ç—Ä–∏–º–∞: {e}")


